package com.example.testwatch;

public class Scaler {

    /**
     * Fits an array of doubles to a scaler from sklearn
     * means and std are hard coded values ported over from the scaler used in the training data
     * could potentially include these in the ai model as a function
    **/
    private static double[] means = new double[]{ 0.14224607836056565868, 0.082042133858433480276, 0.083751422326072647029, 0.035374970804004257641, -0.075882646947026982653, -0.056081050228208535746, -0.0060902939181082171513, 2.7196725463753517182, 1.1025448130927750778, 1.3653862689562228372, 0.58634517766497473712, 1.9556800112153476245, 0.98263088119711083923, 0.82878147367121013378, 1.1023524145234873117, 6.62042086897095583, 13559.753167290728015, 4.362183962456136932, 0.2881898139049320906, 0.29629441624365482344, 0.00062654285827603770336, -0.034763625407269835299, -0.0065176578240698605782, 3.0007628578000065112, 1.2270681987135283464, 1.623674010807869994, 0.48604060913705599001, 1.934487344903768502, 0.99184633898727514456, 1.9831586369131539715, 1.2284052808637564436, 9.2511725521512566672, 14934.70573186245565, 4.7233048560376778013, 0.22689429196792859633, 0.19494923857868023953, 0.00030778823980172299521, -0.021729847826083111689, 0.0090950340846494195229, 1.8074301343526488761, 0.95799018593821383405, 1.2307944266125103727, 0.5213451776649742353, 1.5945277613440678177, 0.79610784695597558436, 1.3271289295115988871, 0.9591491270173730932, 6.6329042406994460634, 8998.6337684045829519, 4.6058709139092073315, 0.24606444990092607439, 0.24266497461928909773, -0.00039099746100311819075, 0.024391257698849266172, -0.01234239875796697139, 0.017900524829763793389, 0.094751353053673353921, 0.43846165185518243268, 0.15878172588832498158, 0.16559793166468594894, 0.071523098260888387512, 0.31140142885197441558, 0.42082316884777193344, 0.50225867547228397747, 89.463479623318860945, 2.9080859768249274211, 0.063713975599048122689, 0.015532994923857722583, -8.2822063768108307663e-05, -0.008280704917574620294, 0.0019760354344658405921, 0.029027466453029095173, 0.12126647452232486302, 0.42121655906780119949, 0.1027664974619289795, 0.22019538655589865339, 0.11288467180324032735, -0.21864263859256022338, 0.39482207042271671993, 0.57261653269996670712, 145.10811610537757588, 2.4066564067315061592, 0.044908896315176576042, 0.012868020304568419943, -0.00063254401467683794499, 0.032729470021235163024, 0.35724828798896596238, 0.10034289973909664428, 0.23213159378415940126, 0.84420896369119113878, 0.1102791878172589557, 0.40839786693322793765, 0.56033026321347023657, -0.098099251659137964854, 0.79246618587350281526, 1.2085981487487946762, 501.56162244156519137, 2.7116264597615651333, 0.048024354305069516524, 0.015431472081218151893, 0.00047343037263033690455, 0.33421566761563459291, 1.5440714315601007378};
    private static double[] std = new double[]{0.37187089931262601317, 0.44637247971234894628, 0.3653074500504138733, 0.42707419528780066198, 0.34918059305528320602, 0.44093342536969049039, 0.094400796398410022348, 3.6030518225491614537, 0.79819124661227636164, 0.92969967460563085471, 0.11275210957133210976, 1.564672012415533775, 0.78744422603817609829, 2.586791749415134678, 0.79964577866343156121, 3.9990276801068604939, 17994.570025114135206, 0.48358910505554314474, 0.067410187348078617897, 0.13534304832625482229, 0.0045737403444469160521, 0.27632745617777493274, 0.1058071644148731727, 2.2066451728146851963, 0.50036165015273481593, 0.61293001258880930315, 0.087680536742693410135, 0.89153076774264883309, 0.47393929864217176906, 3.3768067671965145138, 0.50080270436834140035, 3.2284194409817232874, 11008.351513749692458, 0.32757215814192436332, 0.054622292902096913902, 0.14668458672148804167, 0.0055550166319044431279, 0.28493397116237817457, 0.097721839391740256131, 1.7371295895963443368, 0.46844169827519205329, 0.54973401869571214551, 0.10747431585321050307, 0.91213367871569317469, 0.47198799563555549064, 2.6094008423058929758, 0.46866786555540640435, 2.4701952202679642312, 8678.6476477205433184, 0.44612952612242695594, 0.063646699155699232309, 0.1579107067658611363, 0.0052890521748111185216, 0.28265184921324548739, 0.5041182046993319954, 0.027351551941420311487, 0.056481208888893880138, 0.2827355722199936805, 0.1043838001661312187, 0.11429165756628383022, 0.50283983643535046237, 2.1111371837900523296, 0.2847774597772552152, 0.23612404796602337598, 136.72810785236606534, 0.77714619438289200826, 0.034033743896467072432, 0.01986873619112365652, 0.0029839761446495876099, 0.52265864525249572381, 0.45946931882082142629, 0.035674487775269096701, 0.07773464065942523038, 0.25043968629955337679, 0.086439505529350549318, 0.16011358986009330274, 0.43739741726346437201, 1.5871268531908666599, 0.2493233195333362795, 0.29585460735155627576, 178.34716701024939312, 0.83781141748968757099, 0.027287085853658351459, 0.0069551020340578965928, 0.0042181811761678742259, 0.49938760598553671999, 0.75045789166138188175, 0.12042603601598472762, 0.11847539633368546486, 0.28012053082634807977, 0.063471271117005165219, 0.23596370932755333927, 0.73198744476104193879, 1.21500553417178625, 0.28145065283705050785, 0.57508165596280724774, 602.01667473463442093, 0.68449021621871908305, 0.021437245824219495344, 0.0095822183227716774268, 0.0063169099435123237177, 0.7982789773942260414, 0.64630310850047634208};
    public static double[] Fit(double[] data) throws Exception {
        if (data.length != means.length){
            throw new Exception("Scaler.fit(): provided data array must match length of means and std arrays (103)");
        }

        double[] fitData = new double[data.length];
        for (int i = 0; i < data.length; i++){
            fitData[i] = (data[i] - means[i]) / std[i];
        }
        return fitData;
    }

    public static float[] Fitf(double[] data) throws Exception {
        if (data.length != means.length){
            throw new Exception("Scaler.fit(): provided data array must match length of means and std arrays (103)");
        }

        float[] fitData = new float[data.length];
        for (int i = 0; i < data.length; i++){
            fitData[i] = (float)((data[i] - means[i]) / std[i]);
        }
        return fitData;
    }
}
